using System.Security.Cryptography;
using System.Text;

namespace pwdvault.Services
{
    internal class EncryptionService
    {

        /// <summary>
        /// <para>
        /// This method take the new password and the useer's key and returns the encrypted password using AES256 encryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is randomly generated by AES, and is stored in the encrypted password returned, prior to the password by 16 bytes.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static byte[] EncryptPassword(string password, byte[] key)
        {
            if (String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("The password is empty.");
            }
            if (key == null || key.Length == 0)
            {
                throw new ArgumentException("The encryption key is either null or empty.");
            }

            byte[] encryptedPassword;
            using (Aes aes = Aes.Create())
            {
                aes.Key = key;
                aes.GenerateIV();

                using (var memoryStream = new MemoryStream())
                {
                    memoryStream.Write(aes.IV, 0, 16);
                    using (var cryptoStream = new CryptoStream(memoryStream, aes.CreateEncryptor(), CryptoStreamMode.Write))
                    {
                        var passwordBytes = Encoding.UTF32.GetBytes(password);
                        cryptoStream.Write(passwordBytes, 0, passwordBytes.Length);
                    }
                    encryptedPassword = memoryStream.ToArray();
                }
            }

            return encryptedPassword;
        }

        /// <summary>
        /// <para>
        /// This method take the encrypted password and the user's key and returns the decrypted password using AES256 decryption algorithm.
        /// The key is used to derive the encryption key.
        /// The initialization vector is retrieved from the encrypted password, it corresponds to the first 16 bytes. 
        /// </para>
        /// </summary>
        /// <param name="encryptedPassword"></param>
        /// <param name="key"></param>
        /// <returns></returns>
        /// <exception cref="ArgumentException"></exception>
        public static string DecryptPassword(byte[] encryptedPassword, byte[] key)
        {
            if (encryptedPassword == null || encryptedPassword.Length == 0)
            {
                throw new ArgumentException("The encrypted password is either null or empty.");
            }
            if (key == null || key.Length == 0)
            {
                throw new ArgumentException("The decryption key is either null or empty.");
            }
            using Aes aes = Aes.Create();
            aes.Key = key;

            using MemoryStream memoryStream = new(encryptedPassword);
            var iv = new byte[16];
            memoryStream.Read(iv, 0, 16);
            aes.IV = iv;

            using CryptoStream cryptoStream = new(memoryStream, aes.CreateDecryptor(), CryptoStreamMode.Read);
            var decryptedPasswordByte = new byte[encryptedPassword.Length];
            var byteCountPassword = cryptoStream.Read(decryptedPasswordByte, 0, encryptedPassword.Length);
            return Encoding.UTF32.GetString(decryptedPasswordByte, 0, byteCountPassword);
        }

        /*public static byte[] GetKeyFromFile()
        {
            var folderDataPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), "PasswordVault");
            string keyFilePath = Path.Combine(folderDataPath, "fileKey");
            return File.ReadAllBytes(keyFilePath);
        }*/

        // A modifier
        public static byte[] GetKeyFromVault()
        {
            return File.ReadAllBytes("");
        }

        /// <summary>
        /// <para>
        /// This method takes the user's password and generate a new key for encrypting further added passwords. The key generation is derived froṁ the password.
        /// </para>
        /// </summary>
        /// <param name="password"></param>
        /// <returns></returns>
        public static byte[] GenerateKey(string password)
        {
            if (String.IsNullOrEmpty(password))
            {
                throw new ArgumentException("The password is empty.");
            }

            var salt = new byte[16];
            var randomNumberGenerator = RandomNumberGenerator.Create();
            randomNumberGenerator.GetBytes(salt);

            var keyGenerator = new Rfc2898DeriveBytes(password, salt, 100000, HashAlgorithmName.SHA256);
            var generatedKey = keyGenerator.GetBytes(32);

            return generatedKey;
        }
    }
}
